import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

class Ship {

	private int guns;
	private String name;

	public Ship(int guns, String name) {
		this.guns = guns;
		this.name = name;
	}

	public int getGuns() {
		return guns;
	}

	public void setGuns(int guns) {
		this.guns = guns;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	@Override
	public String toString() {
		return "Ship [Number of guns: " + guns + ", Ship Name: " + name + "]";
	}

	/// Custom comparator class for reverse alphabetical sorting of Strings

	class ReverseAlphabeticalComparator implements Comparator<String> {

		@Override
		public int compare(String s1, String s2) {
			return -s1.compareTo(s2);
		}

	}

}

public class App2 {

	public static void main(String[] args) {

		List<String> bodybuilders = new ArrayList<String>();

		bodybuilders.add("Franco");
		bodybuilders.add("Arnie");
		bodybuilders.add("Piana");
		bodybuilders.add("Scoobi");

		/////////////////////////////////////////
		// Sorting the list of strings in natural order.
		// It will be sorted alphabetically.
		Collections.sort(bodybuilders);

		for (String bodybuilder : bodybuilders) {
			System.out.println(bodybuilder);
		}
		System.out.println();
		/////////////////////////////////////////
		// Using an anonymous class to sort by string length
		Collections.sort(bodybuilders, new Comparator<String>() {

			@Override
			public int compare(String b1, String b2) {
				int len1 = b1.length();
				int len2 = b2.length();

				if (len1 > len2) {
					return 1;
				} else if (len1 < len2) {
					return -1;
				}

				return 0;
			}

		});

		for (String bodybuilder : bodybuilders) {
			System.out.println(bodybuilder);
		}
		System.out.println();
		/////////////////////////////////////////
		// Sorting the list in reverse alphabetical using a custom class
		Collections.sort(bodybuilders, new ReverseAlphabeticalComparator());

		for (String bodybuilder : bodybuilders) {
			System.out.println(bodybuilder);
		}
		System.out.println();
		/////////////////////////////////////////
		/// Sorting integers in opposite of natural order
		List<Integer> numbers = new ArrayList<Integer>();
		numbers.add(5);
		numbers.add(14);
		numbers.add(2);
		numbers.add(32);

		Collections.sort(numbers, new Comparator<Integer>() {

			@Override
			public int compare(Integer num1, Integer num2) {
				return -num1.compareTo(num2);
			}
		});

		for (Integer number : numbers) {
			System.out.println(number);
		}
		System.out.println();
		//////////////////////////////////////////
		// Sorting arbitrary objects by # of Guns

		List<Ship> ships = new ArrayList<Ship>();
		ships.add(new Ship(68, "Constitution"));
		ships.add(new Ship(34, "Trident"));
		ships.add(new Ship(20, "Redoubtable"));
		ships.add(new Ship(108, "Bastion"));

		Collections.sort(ships, new Comparator<Ship>() {
			@Override
			public int compare(Ship ship1, Ship ship2) {
				if (ship1.getGuns() > ship2.getGuns()) {
					return 1;
				} else if (ship1.getGuns() < ship2.getGuns()) {
					return -1;
				}
				return 0;
			}
		});
		
		for(Ship ship: ships){
			System.out.println(ship);
		}
		System.out.println();
		////////////////////////////////////////////
		// Sorting arbitrary objects by name
		
		Collections.sort(ships, new Comparator<Ship>() {
			public int compare(Ship name1, Ship name2) {
				return name1.getName().compareTo(name2.getName());
			}
		});
		for(Ship ship: ships) {
			System.out.println(ship);
		}
		
	}

}
